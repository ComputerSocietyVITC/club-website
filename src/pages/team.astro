---
import TeamCard from "../components/TeamCard.astro";
import team from "../data/teamdata";
import Layout from "../layout/Layout.astro";
---

<Layout>
  <div class="min-h-screen py-16 flex flex-col items-center">
    <h1 class="text-7xl text-white font-bold text-center pb-16">Our Team</h1>
    <div class="w-full max-w-screen-2xl mb-16 px-14">
      <div
        id="team1"
        class="team-row grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-x-18 md:gap-x-20 p-4 justify-items-center"
      >
        {
          team
            .slice(0, 4)
            .map((teamMember, mem) => (
              <TeamCard
                key={teamMember.name}
                name={teamMember.name}
                designation={teamMember.designation}
                imageUrl={teamMember.imageUrl}
                linkUrl={teamMember.linkUrl}
                gitUrl={teamMember.gitUrl}
              />
            ))
        }
      </div>
      <div
        id="team2"
        class="team-row grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-x-18 md:gap-x-20 p-4 justify-items-center"
      >
        {
          team
            .slice(4, 8)
            .map((teamMember, mem) => (
              <TeamCard
                key={teamMember.name}
                name={teamMember.name}
                designation={teamMember.designation}
                imageUrl={teamMember.imageUrl}
                linkUrl={teamMember.linkUrl}
                gitUrl={teamMember.gitUrl}
              />
            ))
        }
      </div>
      <div
        id="team3"
        class="team-row grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-x-18 md:gap-x-20 p-4 justify-items-center"
      >
        {
          team
            .slice(8)
            .map((teamMember, mem) => (
              <TeamCard
                key={teamMember.name}
                name={teamMember.name}
                designation={teamMember.designation}
                imageUrl={teamMember.imageUrl}
                linkUrl={teamMember.linkUrl}
                gitUrl={teamMember.gitUrl}
              />
            ))
        }
      </div>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const rows = document.querySelectorAll(".team-row");
    let currentIndex = 0;

    function highlightRow(index) {
      rows.forEach((row, i) => {
        if (i === index) {
          row.classList.add("highlight");
          row.classList.remove("dim");
          row.scrollIntoView({ behavior: "smooth", block: "center" });
        } else {
          row.classList.remove("highlight");
          row.classList.add("dim");
        }
      });
    }

    highlightRow(currentIndex);

    // Scroll handling for desktop
    function handleDesktopScroll() {
      let newIndex = currentIndex;
      rows.forEach((row, i) => {
        const rect = row.getBoundingClientRect();
        if (rect.top >= 0 && rect.bottom <= window.innerHeight) {
          newIndex = i;
        }
      });
      if (newIndex !== currentIndex) {
        currentIndex = newIndex;
        highlightRow(currentIndex);
      }
    }

    // Scroll handling for mobile
    function handleMobileScroll() {
      let newIndex = currentIndex;
      const viewportHeight = window.innerHeight;
      rows.forEach((row, i) => {
        const rect = row.getBoundingClientRect();
        const rowCenter = (rect.top + rect.bottom) / 2;
        if (rowCenter >= 0 && rowCenter <= viewportHeight) {
          newIndex = i;
        }
      });
      if (newIndex !== currentIndex) {
        currentIndex = newIndex;
        highlightRow(currentIndex);
      }
    }

    // Add scroll listener based on screen size
    const mediaQuery = window.matchMedia("(max-width: 1024px)");
    if (mediaQuery.matches) {
      window.addEventListener("scroll", handleMobileScroll, { passive: true });
    } else {
      window.addEventListener("scroll", handleDesktopScroll, { passive: true });
    }

    // Add event listener to handle changes in screen size
    mediaQuery.addListener((e) => {
      if (e.matches) {
        window.removeEventListener("scroll", handleDesktopScroll);
        window.addEventListener("scroll", handleMobileScroll, {
          passive: true,
        });
      } else {
        window.removeEventListener("scroll", handleMobileScroll);
        window.addEventListener("scroll", handleDesktopScroll, {
          passive: true,
        });
      }
    });
  });
</script>
<style>
  .highlight {
    opacity: 1;
    transition: opacity 0.3s ease;
  }

  .dim {
    opacity: 0.3;
    transition: opacity 0.3s ease;
  }
</style>
